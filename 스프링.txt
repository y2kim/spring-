스프링 :  잘 만들자    
스프링 프레임워크  :  디자인패턴, 트렌잭션 ,암호화, 라이프사이클   S/W 시점인것들  , 의존성 이런 문제적해결
EJB   <-  최초     필요악  , 진입장벽 겁나 높음   그들의 규칙에 맟춰야함  


스프링 라이브러리 or 플러그인  설치  
MAVEN  <-    프로젝트 관리 프레임 워크 

maven  - 라이브러리  자동화               버그의 행연 
Project Object Manager Xml     -repostory    


IOC 

Container (Tomcat 관련) [servlet] smart 


DI 가  중요함 

Spring MVC

AOP  (관점지향)  [패러다임] 횡단관심사      


service layout  필수 !    


스프링은  3단계 이상  패키지 이름을 지어야 함 

요지 :  코드를 잘 짜다 


xml 문서로 유지 
DBCP     xml  커넥션 풀     
인수 부분이 된다  
interface-> dl -> di


의존선 주입  


싱글톤 

프로토타입


어노테이션 비중이 조금 높다      



DTO  = VO [전송] 

카멜케이스  때문에  개지랄남 


@Component   <-  xml , bean, 자동생성 
@Scope  <- (싱글톤,  프로토타입 )  기본 싱글톤 
context:component-scan
base-package : 스캔 지정 
ProductVO instance = (ProductVO)ctx.getBean("productVO");
첫 글자에서 소문자로 바꾸면 된다  
@value 어노테이션(초기값 줄수있음) 
@AutoWired (자료형 기준 )
스캔 - 빈 


동적바인딩 
Spring Container - 이것도 인스턴스 (첫 생성 인스턴스  시작)
context  - 스프링이 일하는  환경  처음 시작점 
인스턴스는 실질적으로 생성  

 
CRUD 

DTO, DAO , DPCP [],xml 


-서비스 레이아웃
트랜젝션 처리를 위하여 



어노테이션 - 컴포넌트,빈
@Component   @Repository  : 서비스 , DAO  같은 특수성 애들은   다른용어로 부른다
@Service  @Controller

Spring JDBC 


web.xml  - 배포  서술자 

mvc 2  --
client - servlet(FrontController) - DAO - Servlet - request - (비즈니스 logic)/ jsp - el/jstl (front) 

Sprint MVC 

Client - Servlet[Dispatch servlet(front controller)](URL 패턴 분석  ,  1:1 매칭 ) <- [Handler Mapper]
-((url: view) & [값 명칭  : model]  retern 디스패쳐 ) DAO-request - (redirect /default : forword ) - where 

DispatcherServlet (자동으로 만들어짐 )
1 HandlerMapper : 담당 컨트롤러 지정 (담당 컨트롤러 사용자 정의 )
2 Model&View  객체가  Dispatcher 에 return 되면  
3 ViewResolver에 의한 보안 처리 후 view로 전달 (보안담당)

인스턴스 생성 방법  @ 컴포턴트 붙이고 - 스캔 (어노테이션) /   빈 생성하거나 (xml)


스프링 EJB 방식을 원하지 않았음 f POJO
일일이 만들기 controller 만들기 귀찮으니   @controller(어노테이션) 만듬 f pojo
먼저 Controller 부터 먼저 찾는다   handler mapper 지움 
메소드 자유로 짓고  @ RequestMapping("/*.*")  붙임 
url-pattern 에서  /(슬래시 하나는 디폴트 맵핑[*.jsp](jsp은 jsp로 가게 하라)*붙이면 피곤해짐) 에서 구분

<session>  - HttpSession

view resolver
transation     -(mybatis)
aop(횡단)   X절차 ,객체

AOP  : (Aspect Oriented Programming ) 관점 지향 개발 /  횡단  관심사 
ex)
로그 , 보안 , 암호  -- 언제 어디서 [공통 관심사  ] 범용성      - 의존성 주입  (부모가 같아야 함)[하나의 인터페이]
로그 시스템  //  의존성주입 조차 해결 안되는 것을  횡단 관심사로 해결한다 (AOP) 객체단위가 아님 
정규 표현식 [패턴을 찾아냄 ] 같은거  
join point  ,  point cut 후보자      point cut  : 대상 ㅍ포인트 찍기 위한것 

joinpoint : 포인트컷 후보자 라고도 부를수 있는데   AOP 통채 ADVICE 할당할 메서드 후보 전체를 통칭한다
PointCut : JoinPoint 중에서 Advice를 할당할 메서드를 추려내기 위한 표현식 
tarket : 포이트 컷 표현식에 의해 조인포인트 중에서 선정된 메서드 들을 통칭 
advice : 추려내진 target 메서드 들에 할당할 메서드 

한꺼번에 여러개가 아니여도  중간에  하나라도 낄때라고  사용할때라고 있으면 사용한다 

대부분 단방향암호 sha 512 같은거  사용 





